import os

class Profile(Struct):
  cluster           = Default(String, 'atla')
  role              = Default(String, os.environ['USER'])
  config            = Required(String)
  environment       = Default(String, "devel")
  name              = Default(String, "screech-owl-alerter")
  package           = Default(String, "{{name}}")
  bundle_version    = Default(String, "latest")
  jar               = Default(String, "{{name}}.jar")
  cron_schedule     = Default(String, '*/10 * * * *')
  splunk_app_id     = Default(String, "{{role}}")
  splunk_tag        = Default(String, "{{cluster}}/{{role}}/{{environment}}/{{name}}")

resources = Resources(cpu = 4, ram = 8*GB, disk = 1*GB)

stats = Stats(library="metrics", port="admin")

#heap dump configs
heapdumpweb_installer = Packer.install('heap_dumper_web', role='heapdumper', version='latest')

heapdumpweb_process = Process(
  name='heapdumpweb_process',
  cmdline='./heap_dumper_web.pex -f ./%s-jvmprocess.pid -s ./.healthchecksnooze --port {{thermos.ports[heapdump]}}' % '{{profile.name}}',
  ephemeral=True
)

run = JVMProcess(
  name = '{{profile.name}}',
  jvm = Java11(extra_jvm_flags = ' '.join([
    "-Denvironment={{profile.environment}}",
    "-Dlog.service.output={{name}}.log",
    "-Dlog.lens.index={{profile.splunk_app_id}}",
    "-Dlog.lens.tag={{profile.splunk_tag}}",
  ])),
  arguments = ' '.join([
    "-jar {{profile.jar}}",
    "-admin.port=:{{thermos.ports[admin]}}",
    "-service.configClass={{profile.config}}",
    "-serviceIdentifier.cluster={{cluster}}",
    "-serviceIdentifier.role={{profile.role}}",
    "-serviceIdentifier.service={{profile.name}}",
    "-serviceIdentifier.environment={{profile.environment}}",
  ]) + " com.twitter.screechowl.alerter.ScreechOwlAlerter",
  resources = resources
)

install = Packer.install(
  name = '{{profile.package}}',
  role = '{{profile.role}}',
  version = '{{profile.bundle_version}}'
)

task = Task(
  name = "install_and_run",
  processes = [install, stats, run, heapdumpweb_installer, heapdumpweb_process],
  resources = resources,
  constraints = order(install, run) + order(heapdumpweb_installer, heapdumpweb_process)
)

alerter = Job(
  role = '{{profile.role}}',
  environment = '{{profile.environment}}',
  name = '{{profile.name}}',
  contact = 'adp-team@twitter.com',
  announce = Announcer(primary_port='admin', portmap={'aurora': 'admin', 'health': 'admin'}),
  cluster = '{{profile.cluster}}',
  task = task,
  update_config = UpdateConfig( watch_secs = 61, batch_size = 1),
  health_check_config = HealthCheckConfig(
      initial_interval_secs = 80,
      interval_secs = 10,
      timeout_secs = 15,
      max_consecutive_failures = 4,
      min_consecutive_successes = 2),
  cron_schedule = '{{profile.cron_schedule}}',
  cron_collision_policy = 'CANCEL_NEW',
  constraints = {
    'os': 'centos7',
  },
)

Devel = Profile(
  cron_schedule = "*/5 * * * *"
)
Staging = Profile(
  config = "com.twitter.screechowl.alerter.config.StagingConfig",
  role = "screechowl-staging",
  environment = "staging",
  cron_schedule = "15 18 1 1 *"
)
Prod = Profile(
  config = "com.twitter.screechowl.alerter.config.ProdConfig",
  role = "screechowl",
  environment = "prod",
  cron_schedule = "*/10 * * * *"
)

jobs = [alerter(cluster = dc).bind(profile = Devel) for dc in ["smf1", "atla"]] + \
       [alerter(cluster = dc).bind(profile = Staging) for dc in ["smf1", "atla"]] + \
       [alerter(cluster = dc, tier = 'preferred').bind(profile = Prod) for dc in ["smf1", "atla"]]

