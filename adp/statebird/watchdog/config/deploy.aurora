import os

class Profile(Struct):
  role              = Default(String, os.environ['USER'])
  environment       = Default(String, "devel")
  name              = Default(String, "statebird-watchdog")
  package           = Default(String, "{{name}}")
  version           = Default(String, "latest")
  jar               = Default(String, "{{name}}-server.jar")
  config            = Required(String)
  flags             = Default(String, "")

resources = Resources(cpu = 1, ram = 4*GB, disk = 4*GB)

thrift_run = JVMProcess(
  name = '{{profile.name}}',
  jvm = Java11(extra_jvm_flags = "-Denvironment={{profile.environment}}"),
  arguments = ' '.join([
    "-jar {{profile.jar}}",
    "-admin.port=:{{thermos.ports[http]}}",
    "-service.configClass={{profile.config}}",
    "-serviceIdentifier.cluster={{cluster}}",
    "-log.output={{profile.name}}.log"
  ]) +  " {{profile.flags}}",
  resources = resources
)

thrift_install = Packer.install(
  name = '{{profile.package}}',
  role = '{{profile.role}}',
  version = '{{profile.version}}'
)

thrift_task = Task(
  name = "install_and_run",
  processes = [
    thrift_install,
    Stats(),
    thrift_run,
    HeapDump(),
    ProfilerSidecar()
  ],
  resources = resources,
  constraints = order(thrift_install, thrift_run)
)

service = Job(
  role = '{{profile.role}}',
  environment = '{{profile.environment}}',
  name = '{{profile.name}}',
  contact = 'adp-team@twitter.com',
  service = '{{production}}',
  announce = Announcer(primary_port='http', portmap={'aurora': 'http', 'health': 'http'}),
  update_config = UpdateConfig( watch_secs = 0, batch_size = 1),
  health_check_config = HealthCheckConfig(
      initial_interval_secs = 80,
      interval_secs = 10,
      timeout_secs = 15,
      max_consecutive_failures = 4,
      min_consecutive_successes = 2),
  task = thrift_task,
  constraints = {
    'os': 'centos7',
  }
)

Devel = Profile(
  config = "com.twitter.statebird.watchdog.server.config.DevEmbeddedDbConfig")

Prod = Profile(
  role = "statebird",
  environment = "prod",
  version = "latest",
  config = "com.twitter.statebird.watchdog.server.config.ProdConfig")

# Original defaults below:
#  Staging = Profile(
#   role = "<valid service account is required>", environment = "staging",
#   package = 'statebirdwatchdog-staging', config = "com.twitter.config.StagingMesosConfig")

Staging = Profile(
  role = "statebird-staging",
  environment = "staging",
  version = "latest",
  config = "com.twitter.statebird.watchdog.server.config.StagingConfig")

ProdGcp = Profile(
  role = "statebird",
  environment = "prod",
  name = "statebird-watchdog-gcp",
  package = "statebird-watchdog",
  version = "latest",
  jar = "statebird-watchdog-server.jar",
  config = "com.twitter.statebird.watchdog.server.config.ProdConfig",
  flags = "-zk.hosts=zookeeper.qus1.twitter.com:2181 -service.ClusterOverride=gcp")

StagingGcp = Profile(
  role = "statebird-staging",
  environment = "staging",
  name = "statebird-watchdog-gcp",
  package = "statebird-watchdog",
  version = "latest",
  jar = "statebird-watchdog-server.jar",
  config = "com.twitter.statebird.watchdog.server.config.StagingConfig",
  flags = "-zk.hosts=zookeeper.qus1.twitter.com:2181 -service.ClusterOverride=gcp")

jobs = []
dcs = ["smf1", "atla", "pdxa"]

jobs += [service(cluster = dc, tier = 'preferred').bind(profile = Staging) for dc in dcs]
jobs += [service(cluster = dc, tier = 'preferred').bind(profile = Prod) for dc in dcs]
jobs += [service(cluster = dc, tier = 'preferred').bind(profile = ProdGcp) for dc in dcs]
jobs += [service(cluster = dc, tier = 'preferred').bind(profile = StagingGcp) for dc in dcs]
jobs += [service(cluster = dc).bind(profile = Devel) for dc in dcs]

